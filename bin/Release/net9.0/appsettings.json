{
  "ApplicationSettings": {
    "SecurityTokenDescriptorKey": "TheSecurityTokenDescriptorKeyGoesHere",
    "SecurityTokenDescriptorExpiresInMinutes": 60,
    "SecurityTokenRefreshRate": 0.5,
    "MaxFailedAccessAttempts": 7,
    "DefaultLockoutTimeSpanInMinutes": 30,
    "ExperimentalIpAddress": "0"
  },
  "ConnectionStrings": {
    "DefaultConnection": "Data Source=YourMSSQLServer;Initial Catalog=BlogAngularDb;Integrated Security=False;User Id=sa;Password=YourPassword;MultipleActiveResultSets=True"
  },
  "AllowedHosts": "*",
  "Serilog": {
    "Using": [ "Serilog.Sinks.Console", "Serilog.Sinks.File" ],
    "MinimumLevel": {
      "Default": "Information",
      "Override": {
        "Microsoft": "Warning",
        "Microsoft.Hosting.Lifetime": "Information"
      }
    },
    "WriteTo": [
      { "Name": "Console" },
      {
        "Name": "File",
        "Args": {
          "path": "logs\\blog-log-.txt",
          "rollingInterval": "Month"
        }
      }
    ],
    "Enrich": [ "FromLogContext" ]
  },
  "IpRateLimiting": {
    "EnableEndpointRateLimiting": true,
    "SecurityTokenRefreshRate": 0.5,
    "StackBlockedRequests": false,
    "RealIpHeader": "X-Real-IP",
    "HttpStatusCode": 429,
    "IpWhitelist": [

    ],
    "EndpointWhitelist": [
      "post:/api/v1.0/identity",
      "post:/api/v1.0/articles",
      "get:/api/v1.0/tags",
      "get:/*.json",
      "get:/*.js",
      "get:/*.css",
      "get:/*.ico",
      "get:/*.svg",
      "get:/*.ttf",
      "get:/*.woff",
      "get:/*.woff2"
    ],
    "ClientWhitelist": [
    ],
    "QuotaExceededResponse": {
      "Content": "Quota exceeded. Maximum allowed: {0} per {1}. Please try again in {2} second(s). Your IP address is {3}",
      "ContentType": "application/json"
    },
    "GeneralRules": [
      {
        "Endpoint": "post:/api/v1.0/identity/login",
        "Period": "30m",
        "Limit": 10
      },
      {
        "Endpoint": "post:/api/v1.0/identity/register",
        "Period": "30m",
        "Limit": 3
      }
    ]
  },

  "IpRateLimitPolicies": {
    "IpRules": [
    ]
  }
}
